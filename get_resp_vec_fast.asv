function [norm_resp_vec, t_resp] = get_resp_vec_fast(raw_sig, Fs, stim_times,stim_times_Fs,resp_dur,high_pass_Khertz,signal_power,normalization_method,gauss_time_win)
% Gets the response vector fast, i.e. in a vectorized manner. This is done
% by removing the stimulus artifact, highpass filtering and rectification
% of the signal. The signal is then cut around stimuli, yielding a
% responses matrix. The response vector is the median, normalized by the
% m.a.d. of this matrix.
% normalization_method: 1=median, 2= mean, 3 = variance

if ~unempty_exist('do_plot')
    do_plot=true;
end

%parameters
ds_Fs=Fs/25;%binning/downsample is to a final Fs of 5 KHz

high_pass=high_pass_Khertz;
org_art_dur=1;
dead_time=0.0;
filt_ord=8;
% resp_dur=[-20,100];
p_conf=0.01;
%chosen_time_win = 1/round(1/gauss_time_win);
gauss_width = (gauss_time_win*Fs);
gauss_win_size = ceil(gauss_width*5);


clean_sig = remove_artifact_advanced(raw_sig,Fs,stim_times,stim_times_Fs);
%clean_sig=remove_stim_artifact(raw_sig,Fs,stim_times,org_art_dur,dead_time);
dec_fact=Fs/ds_Fs;
highpass_sig = highpass_butter_filt(clean_sig,high_pass,Fs, filt_ord);

rect_sig = abs(highpass_sig).^signal_power;
%smooth_sig = gaussfilt(rect_sig,gauss_win_size,gauss_width);
binned_sig = downsample(rect_sig,ds_Fs);
% rect_sig=rect_sig-mean(rect_sig);

[rect_mat, t_resp]=get_resp_mat(rect_mat,stim_times,Fs/ds_Fs,resp_dur);
%[rect_bin_mat, Fs_binned,t_resp]=bin_trials(rect_mat,dec_fact,Fs,t_rect);

p_conf_corr=p_conf/size(rect_mat,1);
prestim_mat=rect_mat(t_resp<-2*org_art_dur,:);
prestim_vec=reshape(prestim_mat,[],1);

% if do_mean
%     prestim_std=nanstd(prestim_vec);
%     norm_resp_vec=nanmean(rect_bin_mat,2)./prestim_std;
% else

all_sums = sum(rect_mat);
upper_removed_indexes = all_sums>median(all_sums)+mad(all_sums)*2;
lower_removed_indexes = all_sums<median(all_sums)-mad(all_sums)*2;
rect_mat(:,upper_removed_indexes)=NaN;
rect_mat(:,lower_removed_indexes)=NaN;



if((sum(upper_removed_indexes)+sum(lower_removed_indexes))*3>length(stim_times))
    disp('Warning, removing more than 33% of the trials')
    keyboard
end

    if normalization_method==1

        prestim_mad=mad(prestim_vec,1);
        prestim_median=nanmedian(prestim_vec);
        norm_resp_vec=(nanmedian(rect_mat,2)-prestim_median)./prestim_mad;
    end
    if normalization_method==2
        prestim_std = nanstd(prestim_vec,1);
        prestim_mean=nanmean(prestim_vec);
        norm_resp_vec=(nanmean(rect_mat,2)-prestim_mean)./prestim_std;
    end
    if normalization_method==3
        prestim_var=nanvar(prestim_vec,0,1);

        norm_resp_vec=(nanvar(rect_mat,0,2))./prestim_var-1;


    end

norm_resp_vec = gaussfilt(norm_resp_vec,gauss_win_size/ds_Fs,gauss_width/ds_Fs);
if any(isnan(norm_resp_vec))
    disp('Warning, NaNs in the response vector')
    beep
    keyboard
end


% end

% norm_resp_vec(t_resp>-org_art_dur & t_resp<org_art_dur)=0;%zeroing the stimulus artifact

% ttest_p_vec=zeros(size(rect_bin_mat,1),1);
% for i_dat=1:size(rect_bin_mat,1)
%     [~,ttest_p_vec(i_dat)] = ttest2(prestim_vec,rect_bin_mat(i_dat,:),p_conf_corr,[],'unequal');
% end

